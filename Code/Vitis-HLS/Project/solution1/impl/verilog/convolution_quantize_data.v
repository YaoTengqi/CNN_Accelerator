// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution_quantize_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        value_r,
        value_scale,
        ap_return
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] value_r;
input  [31:0] value_scale;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] mask_table_address0;
reg    mask_table_ce0;
wire   [51:0] mask_table_q0;
wire   [5:0] one_half_table_address0;
reg    one_half_table_ce0;
wire   [52:0] one_half_table_q0;
wire   [31:0] grp_fu_106_p2;
reg   [31:0] div_reg_400;
wire    ap_CS_fsm_state16;
reg   [0:0] p_Result_s_reg_406;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_112_p1;
reg   [63:0] dc_reg_412;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln1034_fu_139_p2;
reg   [0:0] icmp_ln1034_reg_418;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln1034_1_fu_145_p2;
reg   [0:0] icmp_ln1034_1_reg_424;
wire   [62:0] trunc_ln368_fu_167_p1;
reg   [62:0] trunc_ln368_reg_439;
reg   [51:0] mask_reg_444;
wire    ap_CS_fsm_state20;
reg   [52:0] one_half_reg_449;
wire   [63:0] dc_1_fu_247_p3;
reg   [63:0] dc_1_reg_454;
wire    ap_CS_fsm_state21;
reg   [0:0] p_Result_4_reg_459;
wire    ap_CS_fsm_state22;
wire   [31:0] val_fu_371_p3;
reg   [31:0] val_reg_464;
wire   [63:0] zext_ln541_fu_161_p1;
wire   [31:0] bitcast_ln486_fu_115_p1;
wire   [63:0] data_V_fu_126_p1;
wire   [10:0] tmp_9_fu_129_p4;
wire   [5:0] index_fu_151_p4;
wire   [63:0] zext_ln204_fu_178_p1;
wire   [63:0] p_Result_2_fu_181_p3;
wire   [63:0] data_V_1_fu_187_p2;
wire   [51:0] tmp_fu_193_p1;
wire   [51:0] xor_ln1496_fu_197_p2;
wire   [11:0] tmp_1_fu_208_p4;
wire   [51:0] xs_sig_V_fu_202_p2;
wire   [63:0] p_Result_1_fu_171_p3;
wire   [63:0] p_Result_3_fu_218_p3;
wire   [63:0] select_ln1034_fu_226_p3;
wire   [0:0] xor_ln1034_fu_237_p2;
wire   [0:0] and_ln1034_fu_242_p2;
wire   [63:0] bitcast_ln1034_fu_233_p1;
wire   [63:0] data_V_2_fu_254_p1;
wire   [51:0] tmp_11_fu_275_p1;
wire   [53:0] mantissa_fu_279_p4;
wire   [10:0] tmp_10_fu_265_p4;
wire   [11:0] zext_ln513_fu_293_p1;
wire   [11:0] add_ln513_fu_297_p2;
wire   [10:0] sub_ln1364_fu_311_p2;
wire   [0:0] isNeg_fu_303_p3;
wire  signed [11:0] sext_ln1364_fu_317_p1;
wire   [11:0] ush_fu_321_p3;
wire  signed [31:0] sext_ln1340_fu_329_p1;
wire   [136:0] zext_ln15_fu_289_p1;
wire   [136:0] zext_ln1340_fu_333_p1;
wire   [136:0] r_V_fu_337_p2;
wire   [0:0] tmp_8_fu_349_p3;
wire   [136:0] r_V_1_fu_343_p2;
wire   [31:0] zext_ln671_fu_357_p1;
wire   [31:0] tmp_6_fu_361_p4;
wire    ap_CS_fsm_state23;
wire   [31:0] result_V_2_fu_379_p2;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

convolution_quantize_data_mask_table_ROM_AUTO_1R #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0)
);

convolution_quantize_data_one_half_table_ROM_AUTO_1R #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table_address0),
    .ce0(one_half_table_ce0),
    .q0(one_half_table_q0)
);

convolution_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(value_r),
    .din1(value_scale),
    .ce(1'b1),
    .dout(grp_fu_106_p2)
);

convolution_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_400),
    .ce(1'b1),
    .dout(grp_fu_112_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        dc_1_reg_454 <= dc_1_fu_247_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dc_reg_412 <= grp_fu_112_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        div_reg_400 <= grp_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        icmp_ln1034_1_reg_424 <= icmp_ln1034_1_fu_145_p2;
        icmp_ln1034_reg_418 <= icmp_ln1034_fu_139_p2;
        trunc_ln368_reg_439 <= trunc_ln368_fu_167_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mask_reg_444 <= mask_table_q0;
        one_half_reg_449 <= one_half_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_Result_4_reg_459 <= data_V_2_fu_254_p1[32'd63];
        val_reg_464 <= val_fu_371_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Result_s_reg_406 <= bitcast_ln486_fu_115_p1[32'd31];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        one_half_table_ce0 = 1'b1;
    end else begin
        one_half_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln513_fu_297_p2 = ($signed(zext_ln513_fu_293_p1) + $signed(12'd3073));

assign and_ln1034_fu_242_p2 = (xor_ln1034_fu_237_p2 & icmp_ln1034_1_reg_424);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_return = ((p_Result_4_reg_459[0:0] == 1'b1) ? result_V_2_fu_379_p2 : val_reg_464);

assign bitcast_ln1034_fu_233_p1 = select_ln1034_fu_226_p3;

assign bitcast_ln486_fu_115_p1 = div_reg_400;

assign data_V_1_fu_187_p2 = (zext_ln204_fu_178_p1 + p_Result_2_fu_181_p3);

assign data_V_2_fu_254_p1 = dc_1_reg_454;

assign data_V_fu_126_p1 = dc_reg_412;

assign dc_1_fu_247_p3 = ((and_ln1034_fu_242_p2[0:0] == 1'b1) ? dc_reg_412 : bitcast_ln1034_fu_233_p1);

assign icmp_ln1034_1_fu_145_p2 = ((tmp_9_fu_129_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln1034_fu_139_p2 = ((tmp_9_fu_129_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign index_fu_151_p4 = {{data_V_fu_126_p1[57:52]}};

assign isNeg_fu_303_p3 = add_ln513_fu_297_p2[32'd11];

assign mantissa_fu_279_p4 = {{{{1'd1}, {tmp_11_fu_275_p1}}}, {1'd0}};

assign mask_table_address0 = zext_ln541_fu_161_p1;

assign one_half_table_address0 = zext_ln541_fu_161_p1;

assign p_Result_1_fu_171_p3 = {{p_Result_s_reg_406}, {63'd0}};

assign p_Result_2_fu_181_p3 = {{p_Result_s_reg_406}, {trunc_ln368_reg_439}};

assign p_Result_3_fu_218_p3 = {{tmp_1_fu_208_p4}, {xs_sig_V_fu_202_p2}};

assign r_V_1_fu_343_p2 = zext_ln15_fu_289_p1 << zext_ln1340_fu_333_p1;

assign r_V_fu_337_p2 = zext_ln15_fu_289_p1 >> zext_ln1340_fu_333_p1;

assign result_V_2_fu_379_p2 = (32'd0 - val_reg_464);

assign select_ln1034_fu_226_p3 = ((icmp_ln1034_reg_418[0:0] == 1'b1) ? p_Result_1_fu_171_p3 : p_Result_3_fu_218_p3);

assign sext_ln1340_fu_329_p1 = $signed(ush_fu_321_p3);

assign sext_ln1364_fu_317_p1 = $signed(sub_ln1364_fu_311_p2);

assign sub_ln1364_fu_311_p2 = (11'd1023 - tmp_10_fu_265_p4);

assign tmp_10_fu_265_p4 = {{data_V_2_fu_254_p1[62:52]}};

assign tmp_11_fu_275_p1 = data_V_2_fu_254_p1[51:0];

assign tmp_1_fu_208_p4 = {{data_V_1_fu_187_p2[63:52]}};

assign tmp_6_fu_361_p4 = {{r_V_1_fu_343_p2[84:53]}};

assign tmp_8_fu_349_p3 = r_V_fu_337_p2[32'd53];

assign tmp_9_fu_129_p4 = {{data_V_fu_126_p1[62:52]}};

assign tmp_fu_193_p1 = data_V_1_fu_187_p2[51:0];

assign trunc_ln368_fu_167_p1 = data_V_fu_126_p1[62:0];

assign ush_fu_321_p3 = ((isNeg_fu_303_p3[0:0] == 1'b1) ? sext_ln1364_fu_317_p1 : add_ln513_fu_297_p2);

assign val_fu_371_p3 = ((isNeg_fu_303_p3[0:0] == 1'b1) ? zext_ln671_fu_357_p1 : tmp_6_fu_361_p4);

assign xor_ln1034_fu_237_p2 = (icmp_ln1034_reg_418 ^ 1'd1);

assign xor_ln1496_fu_197_p2 = (mask_reg_444 ^ 52'd4503599627370495);

assign xs_sig_V_fu_202_p2 = (xor_ln1496_fu_197_p2 & tmp_fu_193_p1);

assign zext_ln1340_fu_333_p1 = $unsigned(sext_ln1340_fu_329_p1);

assign zext_ln15_fu_289_p1 = mantissa_fu_279_p4;

assign zext_ln204_fu_178_p1 = one_half_reg_449;

assign zext_ln513_fu_293_p1 = tmp_10_fu_265_p4;

assign zext_ln541_fu_161_p1 = index_fu_151_p4;

assign zext_ln671_fu_357_p1 = tmp_8_fu_349_p3;

endmodule //convolution_quantize_data
