// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolutional_layer_convolution_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pad_img3_address0,
        pad_img3_ce0,
        pad_img3_q0,
        pad_img3_address1,
        pad_img3_ce1,
        pad_img3_q1,
        weight_buf_3_address0,
        weight_buf_3_ce0,
        weight_buf_3_q0,
        weight_buf_3_address1,
        weight_buf_3_ce1,
        weight_buf_3_q1,
        biases_buf,
        conv_to_pool_streams_3_din,
        conv_to_pool_streams_3_full_n,
        conv_to_pool_streams_3_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] pad_img3_address0;
output   pad_img3_ce0;
input  [31:0] pad_img3_q0;
output  [9:0] pad_img3_address1;
output   pad_img3_ce1;
input  [31:0] pad_img3_q1;
output  [3:0] weight_buf_3_address0;
output   weight_buf_3_ce0;
input  [31:0] weight_buf_3_q0;
output  [3:0] weight_buf_3_address1;
output   weight_buf_3_ce1;
input  [31:0] weight_buf_3_q1;
input  [31:0] biases_buf;
output  [31:0] conv_to_pool_streams_3_din;
input   conv_to_pool_streams_3_full_n;
output   conv_to_pool_streams_3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] weight_buf_3_address0;
reg weight_buf_3_ce0;
reg[3:0] weight_buf_3_address1;
reg weight_buf_3_ce1;
reg conv_to_pool_streams_3_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [31:0] weight_buf_3_load_reg_211;
wire    ap_CS_fsm_state3;
reg   [31:0] weight_buf_3_load_1_reg_226;
reg   [31:0] weight_buf_3_load_2_reg_231;
wire    ap_CS_fsm_state4;
reg   [31:0] weight_buf_3_load_3_reg_246;
reg   [31:0] weight_buf_3_load_4_reg_251;
wire    ap_CS_fsm_state5;
reg   [31:0] weight_buf_3_load_5_reg_271;
reg   [31:0] weight_buf_3_load_6_reg_276;
wire   [31:0] w_fu_158_p1;
reg   [31:0] w_reg_281;
wire    ap_CS_fsm_state6;
wire   [31:0] w_33_fu_162_p1;
reg   [31:0] w_33_reg_286;
wire   [31:0] w_34_fu_166_p1;
reg   [31:0] w_34_reg_291;
wire   [31:0] w_35_fu_170_p1;
reg   [31:0] w_35_reg_296;
wire   [31:0] w_36_fu_174_p1;
reg   [31:0] w_36_reg_301;
wire   [31:0] w_37_fu_178_p1;
reg   [31:0] w_37_reg_306;
wire   [31:0] w_38_fu_182_p1;
reg   [31:0] w_38_reg_311;
wire   [31:0] w_39_fu_186_p1;
reg   [31:0] w_39_reg_316;
wire   [31:0] w_40_fu_191_p1;
reg   [31:0] w_40_reg_321;
wire    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start;
wire    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_done;
wire    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_idle;
wire    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_ready;
wire   [9:0] grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_address0;
wire    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_ce0;
wire   [9:0] grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_address1;
wire    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_ce1;
wire   [31:0] grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_conv_to_pool_streams_3_din;
wire    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_conv_to_pool_streams_3_write;
reg    grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start_reg;
wire    ap_CS_fsm_state7;
reg    ap_block_state1;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start_reg = 1'b0;
end

convolutional_layer_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start),
    .ap_done(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_done),
    .ap_idle(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_idle),
    .ap_ready(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_ready),
    .pad_img3_address0(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_address0),
    .pad_img3_ce0(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_ce0),
    .pad_img3_q0(pad_img3_q0),
    .pad_img3_address1(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_address1),
    .pad_img3_ce1(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_ce1),
    .pad_img3_q1(pad_img3_q1),
    .w(w_reg_281),
    .w_33(w_33_reg_286),
    .w_34(w_34_reg_291),
    .w_35(w_35_reg_296),
    .w_36(w_36_reg_301),
    .w_37(w_37_reg_306),
    .w_38(w_38_reg_311),
    .w_39(w_39_reg_316),
    .w_40(w_40_reg_321),
    .biases_buf(biases_buf),
    .conv_to_pool_streams_3_din(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_conv_to_pool_streams_3_din),
    .conv_to_pool_streams_3_full_n(conv_to_pool_streams_3_full_n),
    .conv_to_pool_streams_3_write(grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_conv_to_pool_streams_3_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_ready == 1'b1)) begin
            grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w_33_reg_286 <= w_33_fu_162_p1;
        w_34_reg_291 <= w_34_fu_166_p1;
        w_35_reg_296 <= w_35_fu_170_p1;
        w_36_reg_301 <= w_36_fu_174_p1;
        w_37_reg_306 <= w_37_fu_178_p1;
        w_38_reg_311 <= w_38_fu_182_p1;
        w_39_reg_316 <= w_39_fu_186_p1;
        w_40_reg_321 <= w_40_fu_191_p1;
        w_reg_281 <= w_fu_158_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_buf_3_load_1_reg_226 <= weight_buf_3_q1;
        weight_buf_3_load_2_reg_231 <= weight_buf_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weight_buf_3_load_3_reg_246 <= weight_buf_3_q0;
        weight_buf_3_load_4_reg_251 <= weight_buf_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_buf_3_load_5_reg_271 <= weight_buf_3_q0;
        weight_buf_3_load_6_reg_276 <= weight_buf_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_3_load_reg_211 <= weight_buf_3_q0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_to_pool_streams_3_write = grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_conv_to_pool_streams_3_write;
    end else begin
        conv_to_pool_streams_3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_buf_3_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weight_buf_3_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_buf_3_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_3_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weight_buf_3_address0 = 64'd0;
    end else begin
        weight_buf_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_buf_3_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weight_buf_3_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_buf_3_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        weight_buf_3_address1 = 64'd1;
    end else begin
        weight_buf_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        weight_buf_3_ce0 = 1'b1;
    end else begin
        weight_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        weight_buf_3_ce1 = 1'b1;
    end else begin
        weight_buf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign conv_to_pool_streams_3_din = grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_conv_to_pool_streams_3_din;

assign grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start = grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_ap_start_reg;

assign pad_img3_address0 = grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_address0;

assign pad_img3_address1 = grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_address1;

assign pad_img3_ce0 = grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_ce0;

assign pad_img3_ce1 = grp_convolution_3_Pipeline_conv_for_rows_win_for_rows_win_for_cols_fu_140_pad_img3_ce1;

assign w_33_fu_162_p1 = weight_buf_3_load_1_reg_226;

assign w_34_fu_166_p1 = weight_buf_3_load_2_reg_231;

assign w_35_fu_170_p1 = weight_buf_3_load_3_reg_246;

assign w_36_fu_174_p1 = weight_buf_3_load_4_reg_251;

assign w_37_fu_178_p1 = weight_buf_3_load_5_reg_271;

assign w_38_fu_182_p1 = weight_buf_3_load_6_reg_276;

assign w_39_fu_186_p1 = weight_buf_3_q0;

assign w_40_fu_191_p1 = weight_buf_3_q1;

assign w_fu_158_p1 = weight_buf_3_load_reg_211;

endmodule //convolutional_layer_convolution_3
