-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_cnn_Pipeline_pad_for_rows_pad_for_cols is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pad_img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pad_img_ce0 : OUT STD_LOGIC;
    pad_img_we0 : OUT STD_LOGIC;
    pad_img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_in_ce0 : OUT STD_LOGIC;
    img_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_cnn_Pipeline_pad_for_rows_pad_for_cols is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln16_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln16_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_reg_368_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_368_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_175_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_reg_372 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_1_fu_183_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_1_reg_378 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln33_fu_219_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln33_reg_384 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_113_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_113_reg_389_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_reg_393_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pad_img_addr_reg_397 : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal pad_img_addr_reg_397_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_in_load_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv17_i_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge1_phi_fu_105_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter19_storemerge1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_2_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln33_1_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_64 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_68 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_r_9 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_72 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln16_1_fu_154_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_116_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_163_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_142_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_2_fu_191_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_81_fu_207_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl16_cast_fu_199_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_fu_215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_112_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_111_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_115_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_114_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_289_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl18_cast_fu_282_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_fu_296_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln23_fu_300_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_1_fu_306_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_fu_309_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln25_cast_fu_320_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln33_fu_323_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln33_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_1_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fdiv_32ns_32ns_32_16_no_dsp_1_U1 : component cnn_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_116_p0,
        din1 => ap_const_lv32_437F0000,
        ce => ap_const_logic_1,
        dout => grp_fu_116_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge1_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (empty_116_fu_255_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_113_fu_237_p2 = ap_const_lv1_0) and (icmp_ln16_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_113_fu_237_p2 = ap_const_lv1_1) and (icmp_ln16_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                ap_phi_reg_pp0_iter1_storemerge1_reg_101 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter1_storemerge1_reg_101 <= ap_phi_reg_pp0_iter0_storemerge1_reg_101;
            end if; 
        end if;
    end process;

    c_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_148_p2 = ap_const_lv1_0))) then 
                    c_fu_64 <= add_ln18_fu_261_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_64 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_148_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_72 <= add_ln16_1_fu_154_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_72 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln16_fu_148_p2 = ap_const_lv1_0))) then 
                    r_fu_68 <= select_ln16_1_fu_183_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_68 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_113_reg_389_pp0_iter10_reg <= empty_113_reg_389_pp0_iter9_reg;
                empty_113_reg_389_pp0_iter11_reg <= empty_113_reg_389_pp0_iter10_reg;
                empty_113_reg_389_pp0_iter12_reg <= empty_113_reg_389_pp0_iter11_reg;
                empty_113_reg_389_pp0_iter13_reg <= empty_113_reg_389_pp0_iter12_reg;
                empty_113_reg_389_pp0_iter14_reg <= empty_113_reg_389_pp0_iter13_reg;
                empty_113_reg_389_pp0_iter15_reg <= empty_113_reg_389_pp0_iter14_reg;
                empty_113_reg_389_pp0_iter16_reg <= empty_113_reg_389_pp0_iter15_reg;
                empty_113_reg_389_pp0_iter17_reg <= empty_113_reg_389_pp0_iter16_reg;
                empty_113_reg_389_pp0_iter18_reg <= empty_113_reg_389_pp0_iter17_reg;
                empty_113_reg_389_pp0_iter2_reg <= empty_113_reg_389_pp0_iter1_reg;
                empty_113_reg_389_pp0_iter3_reg <= empty_113_reg_389_pp0_iter2_reg;
                empty_113_reg_389_pp0_iter4_reg <= empty_113_reg_389_pp0_iter3_reg;
                empty_113_reg_389_pp0_iter5_reg <= empty_113_reg_389_pp0_iter4_reg;
                empty_113_reg_389_pp0_iter6_reg <= empty_113_reg_389_pp0_iter5_reg;
                empty_113_reg_389_pp0_iter7_reg <= empty_113_reg_389_pp0_iter6_reg;
                empty_113_reg_389_pp0_iter8_reg <= empty_113_reg_389_pp0_iter7_reg;
                empty_113_reg_389_pp0_iter9_reg <= empty_113_reg_389_pp0_iter8_reg;
                empty_116_reg_393_pp0_iter10_reg <= empty_116_reg_393_pp0_iter9_reg;
                empty_116_reg_393_pp0_iter11_reg <= empty_116_reg_393_pp0_iter10_reg;
                empty_116_reg_393_pp0_iter12_reg <= empty_116_reg_393_pp0_iter11_reg;
                empty_116_reg_393_pp0_iter13_reg <= empty_116_reg_393_pp0_iter12_reg;
                empty_116_reg_393_pp0_iter14_reg <= empty_116_reg_393_pp0_iter13_reg;
                empty_116_reg_393_pp0_iter15_reg <= empty_116_reg_393_pp0_iter14_reg;
                empty_116_reg_393_pp0_iter16_reg <= empty_116_reg_393_pp0_iter15_reg;
                empty_116_reg_393_pp0_iter17_reg <= empty_116_reg_393_pp0_iter16_reg;
                empty_116_reg_393_pp0_iter18_reg <= empty_116_reg_393_pp0_iter17_reg;
                empty_116_reg_393_pp0_iter2_reg <= empty_116_reg_393_pp0_iter1_reg;
                empty_116_reg_393_pp0_iter3_reg <= empty_116_reg_393_pp0_iter2_reg;
                empty_116_reg_393_pp0_iter4_reg <= empty_116_reg_393_pp0_iter3_reg;
                empty_116_reg_393_pp0_iter5_reg <= empty_116_reg_393_pp0_iter4_reg;
                empty_116_reg_393_pp0_iter6_reg <= empty_116_reg_393_pp0_iter5_reg;
                empty_116_reg_393_pp0_iter7_reg <= empty_116_reg_393_pp0_iter6_reg;
                empty_116_reg_393_pp0_iter8_reg <= empty_116_reg_393_pp0_iter7_reg;
                empty_116_reg_393_pp0_iter9_reg <= empty_116_reg_393_pp0_iter8_reg;
                icmp_ln16_reg_368_pp0_iter10_reg <= icmp_ln16_reg_368_pp0_iter9_reg;
                icmp_ln16_reg_368_pp0_iter11_reg <= icmp_ln16_reg_368_pp0_iter10_reg;
                icmp_ln16_reg_368_pp0_iter12_reg <= icmp_ln16_reg_368_pp0_iter11_reg;
                icmp_ln16_reg_368_pp0_iter13_reg <= icmp_ln16_reg_368_pp0_iter12_reg;
                icmp_ln16_reg_368_pp0_iter14_reg <= icmp_ln16_reg_368_pp0_iter13_reg;
                icmp_ln16_reg_368_pp0_iter15_reg <= icmp_ln16_reg_368_pp0_iter14_reg;
                icmp_ln16_reg_368_pp0_iter16_reg <= icmp_ln16_reg_368_pp0_iter15_reg;
                icmp_ln16_reg_368_pp0_iter17_reg <= icmp_ln16_reg_368_pp0_iter16_reg;
                icmp_ln16_reg_368_pp0_iter18_reg <= icmp_ln16_reg_368_pp0_iter17_reg;
                icmp_ln16_reg_368_pp0_iter2_reg <= icmp_ln16_reg_368_pp0_iter1_reg;
                icmp_ln16_reg_368_pp0_iter3_reg <= icmp_ln16_reg_368_pp0_iter2_reg;
                icmp_ln16_reg_368_pp0_iter4_reg <= icmp_ln16_reg_368_pp0_iter3_reg;
                icmp_ln16_reg_368_pp0_iter5_reg <= icmp_ln16_reg_368_pp0_iter4_reg;
                icmp_ln16_reg_368_pp0_iter6_reg <= icmp_ln16_reg_368_pp0_iter5_reg;
                icmp_ln16_reg_368_pp0_iter7_reg <= icmp_ln16_reg_368_pp0_iter6_reg;
                icmp_ln16_reg_368_pp0_iter8_reg <= icmp_ln16_reg_368_pp0_iter7_reg;
                icmp_ln16_reg_368_pp0_iter9_reg <= icmp_ln16_reg_368_pp0_iter8_reg;
                pad_img_addr_reg_397_pp0_iter10_reg <= pad_img_addr_reg_397_pp0_iter9_reg;
                pad_img_addr_reg_397_pp0_iter11_reg <= pad_img_addr_reg_397_pp0_iter10_reg;
                pad_img_addr_reg_397_pp0_iter12_reg <= pad_img_addr_reg_397_pp0_iter11_reg;
                pad_img_addr_reg_397_pp0_iter13_reg <= pad_img_addr_reg_397_pp0_iter12_reg;
                pad_img_addr_reg_397_pp0_iter14_reg <= pad_img_addr_reg_397_pp0_iter13_reg;
                pad_img_addr_reg_397_pp0_iter15_reg <= pad_img_addr_reg_397_pp0_iter14_reg;
                pad_img_addr_reg_397_pp0_iter16_reg <= pad_img_addr_reg_397_pp0_iter15_reg;
                pad_img_addr_reg_397_pp0_iter17_reg <= pad_img_addr_reg_397_pp0_iter16_reg;
                pad_img_addr_reg_397_pp0_iter18_reg <= pad_img_addr_reg_397_pp0_iter17_reg;
                pad_img_addr_reg_397_pp0_iter2_reg <= pad_img_addr_reg_397;
                pad_img_addr_reg_397_pp0_iter3_reg <= pad_img_addr_reg_397_pp0_iter2_reg;
                pad_img_addr_reg_397_pp0_iter4_reg <= pad_img_addr_reg_397_pp0_iter3_reg;
                pad_img_addr_reg_397_pp0_iter5_reg <= pad_img_addr_reg_397_pp0_iter4_reg;
                pad_img_addr_reg_397_pp0_iter6_reg <= pad_img_addr_reg_397_pp0_iter5_reg;
                pad_img_addr_reg_397_pp0_iter7_reg <= pad_img_addr_reg_397_pp0_iter6_reg;
                pad_img_addr_reg_397_pp0_iter8_reg <= pad_img_addr_reg_397_pp0_iter7_reg;
                pad_img_addr_reg_397_pp0_iter9_reg <= pad_img_addr_reg_397_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_113_reg_389_pp0_iter1_reg <= empty_113_reg_389;
                empty_116_reg_393_pp0_iter1_reg <= empty_116_reg_393;
                icmp_ln16_reg_368 <= icmp_ln16_fu_148_p2;
                icmp_ln16_reg_368_pp0_iter1_reg <= icmp_ln16_reg_368;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storemerge1_reg_101 <= ap_phi_reg_pp0_iter9_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_storemerge1_reg_101 <= ap_phi_reg_pp0_iter10_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_storemerge1_reg_101 <= ap_phi_reg_pp0_iter11_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_storemerge1_reg_101 <= ap_phi_reg_pp0_iter12_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_storemerge1_reg_101 <= ap_phi_reg_pp0_iter13_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_storemerge1_reg_101 <= ap_phi_reg_pp0_iter14_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_storemerge1_reg_101 <= ap_phi_reg_pp0_iter15_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_storemerge1_reg_101 <= ap_phi_reg_pp0_iter16_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_storemerge1_reg_101 <= ap_phi_reg_pp0_iter17_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_storemerge1_reg_101 <= ap_phi_reg_pp0_iter18_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_storemerge1_reg_101 <= ap_phi_reg_pp0_iter1_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_storemerge1_reg_101 <= ap_phi_reg_pp0_iter2_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_storemerge1_reg_101 <= ap_phi_reg_pp0_iter3_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_storemerge1_reg_101 <= ap_phi_reg_pp0_iter4_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_storemerge1_reg_101 <= ap_phi_reg_pp0_iter5_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storemerge1_reg_101 <= ap_phi_reg_pp0_iter6_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_storemerge1_reg_101 <= ap_phi_reg_pp0_iter7_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storemerge1_reg_101 <= ap_phi_reg_pp0_iter8_storemerge1_reg_101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_116_reg_393_pp0_iter17_reg = ap_const_lv1_0) and (empty_113_reg_389_pp0_iter17_reg = ap_const_lv1_0) and (icmp_ln16_reg_368_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv17_i_reg_417 <= grp_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln16_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_113_reg_389 <= empty_113_fu_237_p2;
                select_ln16_1_reg_378 <= select_ln16_1_fu_183_p3;
                select_ln16_reg_372 <= select_ln16_fu_175_p3;
                    sub_ln33_reg_384(9 downto 2) <= sub_ln33_fu_219_p2(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_113_fu_237_p2 = ap_const_lv1_0) and (icmp_ln16_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_116_reg_393 <= empty_116_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_116_reg_393_pp0_iter1_reg = ap_const_lv1_0) and (empty_113_reg_389_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln16_reg_368_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                img_in_load_reg_407 <= img_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln16_reg_368 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                pad_img_addr_reg_397 <= zext_ln23_2_fu_315_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    sub_ln33_reg_384(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln16_1_fu_154_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln16_fu_163_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_9) + unsigned(ap_const_lv5_1));
    add_ln18_fu_261_p2 <= std_logic_vector(unsigned(select_ln16_fu_175_p3) + unsigned(ap_const_lv5_1));
    add_ln23_fu_309_p2 <= std_logic_vector(unsigned(sub_ln23_fu_300_p2) + unsigned(zext_ln23_1_fu_306_p1));
    add_ln33_1_fu_333_p2 <= std_logic_vector(unsigned(sub_ln33_reg_384) + unsigned(sext_ln33_fu_329_p1));
    add_ln33_fu_323_p2 <= std_logic_vector(unsigned(trunc_ln25_cast_fu_320_p1) + unsigned(ap_const_lv6_3F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln16_fu_148_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln16_fu_148_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter18_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_storemerge1_phi_fu_105_p6_assign_proc : process(icmp_ln16_reg_368_pp0_iter18_reg, empty_113_reg_389_pp0_iter18_reg, empty_116_reg_393_pp0_iter18_reg, conv17_i_reg_417, ap_phi_reg_pp0_iter19_storemerge1_reg_101)
    begin
        if (((empty_116_reg_393_pp0_iter18_reg = ap_const_lv1_0) and (empty_113_reg_389_pp0_iter18_reg = ap_const_lv1_0) and (icmp_ln16_reg_368_pp0_iter18_reg = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge1_phi_fu_105_p6 <= conv17_i_reg_417;
        else 
            ap_phi_mux_storemerge1_phi_fu_105_p6 <= ap_phi_reg_pp0_iter19_storemerge1_reg_101;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge1_reg_101 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_72)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_r_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_68)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_r_9 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_r_9 <= r_fu_68;
        end if; 
    end process;

    empty_111_fu_225_p2 <= "1" when (select_ln16_1_fu_183_p3 = ap_const_lv5_1D) else "0";
    empty_112_fu_231_p2 <= "1" when (select_ln16_1_fu_183_p3 = ap_const_lv5_0) else "0";
    empty_113_fu_237_p2 <= (empty_112_fu_231_p2 or empty_111_fu_225_p2);
    empty_114_fu_243_p2 <= "1" when (select_ln16_fu_175_p3 = ap_const_lv5_1D) else "0";
    empty_115_fu_249_p2 <= "1" when (select_ln16_fu_175_p3 = ap_const_lv5_0) else "0";
    empty_116_fu_255_p2 <= (empty_115_fu_249_p2 or empty_114_fu_243_p2);
    empty_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_9) + unsigned(ap_const_lv5_1F));
    grp_fu_116_p0 <= img_in_load_reg_407;
    icmp_ln16_fu_148_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_384) else "0";
    icmp_ln18_fu_169_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv5_1E) else "0";
    img_in_address0 <= zext_ln33_1_fu_338_p1(10 - 1 downto 0);

    img_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_in_ce0 <= ap_const_logic_1;
        else 
            img_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl16_cast_fu_199_p3 <= (select_ln16_2_fu_191_p3 & ap_const_lv5_0);
    p_shl18_cast_fu_282_p3 <= (select_ln16_1_reg_378 & ap_const_lv5_0);
    pad_img_address0 <= pad_img_addr_reg_397_pp0_iter18_reg;

    pad_img_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            pad_img_ce0 <= ap_const_logic_1;
        else 
            pad_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pad_img_d0 <= ap_phi_mux_storemerge1_phi_fu_105_p6;

    pad_img_we0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            pad_img_we0 <= ap_const_logic_1;
        else 
            pad_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln16_1_fu_183_p3 <= 
        add_ln16_fu_163_p2 when (icmp_ln18_fu_169_p2(0) = '1') else 
        ap_sig_allocacmp_r_9;
    select_ln16_2_fu_191_p3 <= 
        ap_sig_allocacmp_r_9 when (icmp_ln18_fu_169_p2(0) = '1') else 
        empty_fu_142_p2;
    select_ln16_fu_175_p3 <= 
        ap_const_lv5_0 when (icmp_ln18_fu_169_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
        sext_ln33_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_fu_323_p2),10));

    sub_ln23_fu_300_p2 <= std_logic_vector(unsigned(p_shl18_cast_fu_282_p3) - unsigned(zext_ln23_fu_296_p1));
    sub_ln33_fu_219_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_199_p3) - unsigned(zext_ln33_fu_215_p1));
    tmp_81_fu_207_p3 <= (select_ln16_2_fu_191_p3 & ap_const_lv2_0);
    tmp_fu_289_p3 <= (select_ln16_1_reg_378 & ap_const_lv1_0);
    trunc_ln25_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_372),6));
    zext_ln23_1_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_372),10));
    zext_ln23_2_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_309_p2),64));
    zext_ln23_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_289_p3),10));
    zext_ln33_1_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_1_fu_333_p2),64));
    zext_ln33_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_207_p3),10));
end behav;
