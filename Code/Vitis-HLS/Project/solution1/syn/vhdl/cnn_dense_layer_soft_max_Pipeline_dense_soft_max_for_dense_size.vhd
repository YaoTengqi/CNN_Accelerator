-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_to_softmax_streams_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_0_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_0_read : OUT STD_LOGIC;
    dense_to_softmax_streams_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_1_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_1_read : OUT STD_LOGIC;
    dense_to_softmax_streams_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_2_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_2_read : OUT STD_LOGIC;
    dense_to_softmax_streams_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_3_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_3_read : OUT STD_LOGIC;
    dense_to_softmax_streams_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_4_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_4_read : OUT STD_LOGIC;
    dense_to_softmax_streams_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_5_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_5_read : OUT STD_LOGIC;
    dense_to_softmax_streams_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_6_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_6_read : OUT STD_LOGIC;
    dense_to_softmax_streams_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_to_softmax_streams_7_empty_n : IN STD_LOGIC;
    dense_to_softmax_streams_7_read : OUT STD_LOGIC;
    prediction_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_ce0 : OUT STD_LOGIC;
    prediction_we0 : OUT STD_LOGIC;
    prediction_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    exp_sum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    exp_sum_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state28_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state35_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_state42_pp0_stage6_iter5 : BOOLEAN;
    signal ap_block_state49_pp0_stage6_iter6 : BOOLEAN;
    signal ap_block_state56_pp0_stage6_iter7 : BOOLEAN;
    signal ap_block_state63_pp0_stage6_iter8 : BOOLEAN;
    signal ap_block_state70_pp0_stage6_iter9 : BOOLEAN;
    signal ap_block_state77_pp0_stage6_iter10 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal icmp_ln17_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage6 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dense_biases_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_biases_ce0 : STD_LOGIC;
    signal dense_biases_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal dense_to_softmax_streams_1_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_2_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_3_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_4_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_5_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_6_blk_n : STD_LOGIC;
    signal dense_to_softmax_streams_7_blk_n : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln17_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_264_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal d_cast_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_cast_reg_268_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state58_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state65_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state72_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state79_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal dense_to_softmax_streams_0_read_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_1_read_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_1_read_reg_288_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_2_read_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_2_read_reg_293_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_2_read_reg_293_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_3_read_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_3_read_reg_298_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_3_read_reg_298_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_3_read_reg_298_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_4_read_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_4_read_reg_303_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_4_read_reg_303_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_4_read_reg_303_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_4_read_reg_303_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_5_read_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_5_read_reg_308_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_5_read_reg_308_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_5_read_reg_308_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_5_read_reg_308_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_5_read_reg_308_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_6_read_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_6_read_reg_313_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_6_read_reg_313_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_6_read_reg_313_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_6_read_reg_313_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_6_read_reg_313_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_6_read_reg_313_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_to_softmax_streams_7_read_reg_318_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state38_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state45_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state52_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state59_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state66_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state73_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_1_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_1_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_2_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state32_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state39_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state46_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state53_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state60_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_state67_pp0_stage3_iter9 : BOOLEAN;
    signal ap_block_state74_pp0_stage3_iter10 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal sum_2_2_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_3_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_3_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_4_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state26_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state33_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state40_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state47_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state54_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_state61_pp0_stage4_iter8 : BOOLEAN;
    signal ap_block_state68_pp0_stage4_iter9 : BOOLEAN;
    signal ap_block_state75_pp0_stage4_iter10 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal sum_2_4_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_5_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_5_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_6_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state27_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state34_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_state41_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_state48_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_state55_pp0_stage5_iter7 : BOOLEAN;
    signal ap_block_state62_pp0_stage5_iter8 : BOOLEAN;
    signal ap_block_state69_pp0_stage5_iter9 : BOOLEAN;
    signal ap_block_state76_pp0_stage5_iter10 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal sum_2_6_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln144_7_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_7_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal exp_sum_1_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exp_sum_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_exp_sum_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal d_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_fu_185_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_d_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_153_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_ce : STD_LOGIC;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal grp_fu_157_ce : STD_LOGIC;
    signal grp_fu_161_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter10_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to11 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fexp_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size_dense_biases_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dense_biases_U : component cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size_dense_biases_ROM_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_biases_address0,
        ce0 => dense_biases_ce0,
        q0 => dense_biases_q0);

    fadd_32ns_32ns_32_7_full_dsp_1_U555 : component cnn_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_153_p0,
        din1 => grp_fu_153_p1,
        ce => grp_fu_153_ce,
        dout => grp_fu_153_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U556 : component cnn_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_157_p0,
        din1 => grp_fu_157_p1,
        ce => grp_fu_157_ce,
        dout => grp_fu_157_p2);

    fexp_32ns_32ns_32_10_full_dsp_1_U557 : component cnn_fexp_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => sum_2_7_reg_398,
        ce => grp_fu_161_ce,
        dout => grp_fu_161_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage6,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    d_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_179_p2 = ap_const_lv1_0))) then 
                    d_fu_68 <= add_ln17_fu_185_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    d_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    exp_sum_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                exp_sum_fu_64 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                exp_sum_fu_64 <= exp_sum_1_reg_414;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_179_p2 = ap_const_lv1_0))) then
                    d_cast_reg_268(3 downto 0) <= d_cast_fu_191_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    d_cast_reg_268_pp0_iter10_reg(3 downto 0) <= d_cast_reg_268_pp0_iter9_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter1_reg(3 downto 0) <= d_cast_reg_268(3 downto 0);
                    d_cast_reg_268_pp0_iter2_reg(3 downto 0) <= d_cast_reg_268_pp0_iter1_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter3_reg(3 downto 0) <= d_cast_reg_268_pp0_iter2_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter4_reg(3 downto 0) <= d_cast_reg_268_pp0_iter3_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter5_reg(3 downto 0) <= d_cast_reg_268_pp0_iter4_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter6_reg(3 downto 0) <= d_cast_reg_268_pp0_iter5_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter7_reg(3 downto 0) <= d_cast_reg_268_pp0_iter6_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter8_reg(3 downto 0) <= d_cast_reg_268_pp0_iter7_reg(3 downto 0);
                    d_cast_reg_268_pp0_iter9_reg(3 downto 0) <= d_cast_reg_268_pp0_iter8_reg(3 downto 0);
                icmp_ln17_reg_264 <= icmp_ln17_fu_179_p2;
                icmp_ln17_reg_264_pp0_iter10_reg <= icmp_ln17_reg_264_pp0_iter9_reg;
                icmp_ln17_reg_264_pp0_iter1_reg <= icmp_ln17_reg_264;
                icmp_ln17_reg_264_pp0_iter2_reg <= icmp_ln17_reg_264_pp0_iter1_reg;
                icmp_ln17_reg_264_pp0_iter3_reg <= icmp_ln17_reg_264_pp0_iter2_reg;
                icmp_ln17_reg_264_pp0_iter4_reg <= icmp_ln17_reg_264_pp0_iter3_reg;
                icmp_ln17_reg_264_pp0_iter5_reg <= icmp_ln17_reg_264_pp0_iter4_reg;
                icmp_ln17_reg_264_pp0_iter6_reg <= icmp_ln17_reg_264_pp0_iter5_reg;
                icmp_ln17_reg_264_pp0_iter7_reg <= icmp_ln17_reg_264_pp0_iter6_reg;
                icmp_ln17_reg_264_pp0_iter8_reg <= icmp_ln17_reg_264_pp0_iter7_reg;
                icmp_ln17_reg_264_pp0_iter9_reg <= icmp_ln17_reg_264_pp0_iter8_reg;
                tmp_reg_403 <= grp_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dense_to_softmax_streams_0_read_reg_283 <= dense_to_softmax_streams_0_dout;
                dense_to_softmax_streams_1_read_reg_288 <= dense_to_softmax_streams_1_dout;
                dense_to_softmax_streams_2_read_reg_293 <= dense_to_softmax_streams_2_dout;
                dense_to_softmax_streams_3_read_reg_298 <= dense_to_softmax_streams_3_dout;
                dense_to_softmax_streams_4_read_reg_303 <= dense_to_softmax_streams_4_dout;
                dense_to_softmax_streams_5_read_reg_308 <= dense_to_softmax_streams_5_dout;
                dense_to_softmax_streams_6_read_reg_313 <= dense_to_softmax_streams_6_dout;
                dense_to_softmax_streams_7_read_reg_318 <= dense_to_softmax_streams_7_dout;
                sum_reg_278 <= dense_biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dense_to_softmax_streams_1_read_reg_288_pp0_iter1_reg <= dense_to_softmax_streams_1_read_reg_288;
                dense_to_softmax_streams_2_read_reg_293_pp0_iter1_reg <= dense_to_softmax_streams_2_read_reg_293;
                dense_to_softmax_streams_2_read_reg_293_pp0_iter2_reg <= dense_to_softmax_streams_2_read_reg_293_pp0_iter1_reg;
                dense_to_softmax_streams_3_read_reg_298_pp0_iter1_reg <= dense_to_softmax_streams_3_read_reg_298;
                dense_to_softmax_streams_3_read_reg_298_pp0_iter2_reg <= dense_to_softmax_streams_3_read_reg_298_pp0_iter1_reg;
                dense_to_softmax_streams_3_read_reg_298_pp0_iter3_reg <= dense_to_softmax_streams_3_read_reg_298_pp0_iter2_reg;
                dense_to_softmax_streams_4_read_reg_303_pp0_iter1_reg <= dense_to_softmax_streams_4_read_reg_303;
                dense_to_softmax_streams_4_read_reg_303_pp0_iter2_reg <= dense_to_softmax_streams_4_read_reg_303_pp0_iter1_reg;
                dense_to_softmax_streams_4_read_reg_303_pp0_iter3_reg <= dense_to_softmax_streams_4_read_reg_303_pp0_iter2_reg;
                dense_to_softmax_streams_4_read_reg_303_pp0_iter4_reg <= dense_to_softmax_streams_4_read_reg_303_pp0_iter3_reg;
                dense_to_softmax_streams_5_read_reg_308_pp0_iter1_reg <= dense_to_softmax_streams_5_read_reg_308;
                dense_to_softmax_streams_5_read_reg_308_pp0_iter2_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter1_reg;
                dense_to_softmax_streams_5_read_reg_308_pp0_iter3_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter2_reg;
                dense_to_softmax_streams_5_read_reg_308_pp0_iter4_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter3_reg;
                dense_to_softmax_streams_5_read_reg_308_pp0_iter5_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter4_reg;
                dense_to_softmax_streams_6_read_reg_313_pp0_iter1_reg <= dense_to_softmax_streams_6_read_reg_313;
                dense_to_softmax_streams_6_read_reg_313_pp0_iter2_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter1_reg;
                dense_to_softmax_streams_6_read_reg_313_pp0_iter3_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter2_reg;
                dense_to_softmax_streams_6_read_reg_313_pp0_iter4_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter3_reg;
                dense_to_softmax_streams_6_read_reg_313_pp0_iter5_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter4_reg;
                dense_to_softmax_streams_6_read_reg_313_pp0_iter6_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter5_reg;
                dense_to_softmax_streams_7_read_reg_318_pp0_iter1_reg <= dense_to_softmax_streams_7_read_reg_318;
                dense_to_softmax_streams_7_read_reg_318_pp0_iter2_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter1_reg;
                dense_to_softmax_streams_7_read_reg_318_pp0_iter3_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter2_reg;
                dense_to_softmax_streams_7_read_reg_318_pp0_iter4_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter3_reg;
                dense_to_softmax_streams_7_read_reg_318_pp0_iter5_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter4_reg;
                dense_to_softmax_streams_7_read_reg_318_pp0_iter6_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter5_reg;
                dense_to_softmax_streams_7_read_reg_318_pp0_iter7_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_sum_1_reg_414 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sum_2_1_reg_338 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sum_2_2_reg_348 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sum_2_3_reg_358 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                sum_2_4_reg_368 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                sum_2_5_reg_378 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                sum_2_6_reg_388 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                sum_2_7_reg_398 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sum_2_reg_328 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    d_cast_reg_268(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    d_cast_reg_268_pp0_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage6_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter10_stage1, ap_idle_pp0_0to9, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to11, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to11 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln17_fu_185_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_d_1) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_0_empty_n, dense_to_softmax_streams_1_empty_n, dense_to_softmax_streams_2_empty_n, dense_to_softmax_streams_3_empty_n, dense_to_softmax_streams_4_empty_n, dense_to_softmax_streams_5_empty_n, dense_to_softmax_streams_6_empty_n, dense_to_softmax_streams_7_empty_n)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((dense_to_softmax_streams_0_empty_n = ap_const_logic_0) and (icmp_ln17_reg_264 = ap_const_lv1_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_7_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_6_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_5_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_4_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_3_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_2_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_0_empty_n, dense_to_softmax_streams_1_empty_n, dense_to_softmax_streams_2_empty_n, dense_to_softmax_streams_3_empty_n, dense_to_softmax_streams_4_empty_n, dense_to_softmax_streams_5_empty_n, dense_to_softmax_streams_6_empty_n, dense_to_softmax_streams_7_empty_n)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((dense_to_softmax_streams_0_empty_n = ap_const_logic_0) and (icmp_ln17_reg_264 = ap_const_lv1_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_7_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_6_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_5_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_4_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_3_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_2_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_0_empty_n, dense_to_softmax_streams_1_empty_n, dense_to_softmax_streams_2_empty_n, dense_to_softmax_streams_3_empty_n, dense_to_softmax_streams_4_empty_n, dense_to_softmax_streams_5_empty_n, dense_to_softmax_streams_6_empty_n, dense_to_softmax_streams_7_empty_n)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((dense_to_softmax_streams_0_empty_n = ap_const_logic_0) and (icmp_ln17_reg_264 = ap_const_lv1_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_7_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_6_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_5_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_4_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_3_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_2_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_1_empty_n = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(icmp_ln17_reg_264, dense_to_softmax_streams_0_empty_n, dense_to_softmax_streams_1_empty_n, dense_to_softmax_streams_2_empty_n, dense_to_softmax_streams_3_empty_n, dense_to_softmax_streams_4_empty_n, dense_to_softmax_streams_5_empty_n, dense_to_softmax_streams_6_empty_n, dense_to_softmax_streams_7_empty_n)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((dense_to_softmax_streams_0_empty_n = ap_const_logic_0) and (icmp_ln17_reg_264 = ap_const_lv1_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_7_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_6_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_5_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_4_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_3_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_2_empty_n = ap_const_logic_0)) or ((icmp_ln17_reg_264 = ap_const_lv1_0) and (dense_to_softmax_streams_1_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state30_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage6_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage5_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage6_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage4_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage5_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage6_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage3_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage4_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage5_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage6_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage3_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage4_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage5_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage6_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, icmp_ln17_reg_264)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter10_stage1_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, icmp_ln17_reg_264_pp0_iter10_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln17_reg_264_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter10_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter10_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to11_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to11 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage6;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_d_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, d_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_d_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_d_1 <= d_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_exp_sum_load_assign_proc : process(ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, exp_sum_1_reg_414, exp_sum_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_exp_sum_load <= exp_sum_1_reg_414;
        else 
            ap_sig_allocacmp_exp_sum_load <= exp_sum_fu_64;
        end if; 
    end process;

    bitcast_ln144_1_fu_205_p1 <= dense_to_softmax_streams_1_read_reg_288_pp0_iter1_reg;
    bitcast_ln144_2_fu_209_p1 <= dense_to_softmax_streams_2_read_reg_293_pp0_iter2_reg;
    bitcast_ln144_3_fu_213_p1 <= dense_to_softmax_streams_3_read_reg_298_pp0_iter3_reg;
    bitcast_ln144_4_fu_217_p1 <= dense_to_softmax_streams_4_read_reg_303_pp0_iter4_reg;
    bitcast_ln144_5_fu_221_p1 <= dense_to_softmax_streams_5_read_reg_308_pp0_iter5_reg;
    bitcast_ln144_6_fu_225_p1 <= dense_to_softmax_streams_6_read_reg_313_pp0_iter6_reg;
    bitcast_ln144_7_fu_229_p1 <= dense_to_softmax_streams_7_read_reg_318_pp0_iter7_reg;
    bitcast_ln144_fu_201_p1 <= dense_to_softmax_streams_0_read_reg_283;
    d_cast_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_d_1),64));
    dense_biases_address0 <= d_cast_fu_191_p1(4 - 1 downto 0);

    dense_biases_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_biases_ce0 <= ap_const_logic_1;
        else 
            dense_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_0_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_0_blk_n <= dense_to_softmax_streams_0_empty_n;
        else 
            dense_to_softmax_streams_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_0_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_0_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_0_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_1_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_1_blk_n <= dense_to_softmax_streams_1_empty_n;
        else 
            dense_to_softmax_streams_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_1_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_1_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_1_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_2_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_2_blk_n <= dense_to_softmax_streams_2_empty_n;
        else 
            dense_to_softmax_streams_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_2_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_2_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_2_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_3_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_3_blk_n <= dense_to_softmax_streams_3_empty_n;
        else 
            dense_to_softmax_streams_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_3_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_3_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_3_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_4_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_4_blk_n <= dense_to_softmax_streams_4_empty_n;
        else 
            dense_to_softmax_streams_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_4_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_4_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_4_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_5_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_5_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_5_blk_n <= dense_to_softmax_streams_5_empty_n;
        else 
            dense_to_softmax_streams_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_5_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_5_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_5_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_6_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_6_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_6_blk_n <= dense_to_softmax_streams_6_empty_n;
        else 
            dense_to_softmax_streams_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_6_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_6_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_6_read <= ap_const_logic_0;
        end if; 
    end process;


    dense_to_softmax_streams_7_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, dense_to_softmax_streams_7_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_7_blk_n <= dense_to_softmax_streams_7_empty_n;
        else 
            dense_to_softmax_streams_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_to_softmax_streams_7_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln17_reg_264, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln17_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_to_softmax_streams_7_read <= ap_const_logic_1;
        else 
            dense_to_softmax_streams_7_read <= ap_const_logic_0;
        end if; 
    end process;

    exp_sum_out <= exp_sum_fu_64;

    exp_sum_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln17_reg_264_pp0_iter10_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln17_reg_264_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            exp_sum_out_ap_vld <= ap_const_logic_1;
        else 
            exp_sum_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_153_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_153_ce <= ap_const_logic_1;
        else 
            grp_fu_153_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_153_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, sum_reg_278, ap_CS_fsm_pp0_stage2, sum_2_1_reg_338, ap_CS_fsm_pp0_stage3, sum_2_3_reg_358, ap_CS_fsm_pp0_stage4, sum_2_5_reg_378, ap_CS_fsm_pp0_stage5, ap_sig_allocacmp_exp_sum_load, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_153_p0 <= ap_sig_allocacmp_exp_sum_load;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_153_p0 <= sum_2_5_reg_378;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_153_p0 <= sum_2_3_reg_358;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_153_p0 <= sum_2_1_reg_338;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_153_p0 <= sum_reg_278;
        else 
            grp_fu_153_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_153_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, bitcast_ln144_fu_201_p1, ap_CS_fsm_pp0_stage2, bitcast_ln144_2_fu_209_p1, ap_CS_fsm_pp0_stage3, bitcast_ln144_4_fu_217_p1, ap_CS_fsm_pp0_stage4, bitcast_ln144_6_fu_225_p1, ap_CS_fsm_pp0_stage5, tmp_reg_403, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_153_p1 <= tmp_reg_403;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_153_p1 <= bitcast_ln144_6_fu_225_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_153_p1 <= bitcast_ln144_4_fu_217_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_153_p1 <= bitcast_ln144_2_fu_209_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_153_p1 <= bitcast_ln144_fu_201_p1;
        else 
            grp_fu_153_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_157_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_157_ce <= ap_const_logic_1;
        else 
            grp_fu_157_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_157_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, sum_2_reg_328, ap_CS_fsm_pp0_stage3, sum_2_2_reg_348, ap_CS_fsm_pp0_stage4, sum_2_4_reg_368, ap_CS_fsm_pp0_stage5, sum_2_6_reg_388, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_157_p0 <= sum_2_6_reg_388;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_157_p0 <= sum_2_4_reg_368;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_157_p0 <= sum_2_2_reg_348;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_157_p0 <= sum_2_reg_328;
        else 
            grp_fu_157_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_157_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, bitcast_ln144_1_fu_205_p1, ap_CS_fsm_pp0_stage3, bitcast_ln144_3_fu_213_p1, ap_CS_fsm_pp0_stage4, bitcast_ln144_5_fu_221_p1, ap_CS_fsm_pp0_stage5, bitcast_ln144_7_fu_229_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_157_p1 <= bitcast_ln144_7_fu_229_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_157_p1 <= bitcast_ln144_5_fu_221_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_157_p1 <= bitcast_ln144_3_fu_213_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_157_p1 <= bitcast_ln144_1_fu_205_p1;
        else 
            grp_fu_157_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_161_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_161_ce <= ap_const_logic_1;
        else 
            grp_fu_161_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln17_fu_179_p2 <= "1" when (ap_sig_allocacmp_d_1 = ap_const_lv4_A) else "0";
    prediction_address0 <= d_cast_reg_268_pp0_iter10_reg(4 - 1 downto 0);

    prediction_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            prediction_ce0 <= ap_const_logic_1;
        else 
            prediction_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_d0 <= tmp_reg_403;

    prediction_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            prediction_we0 <= ap_const_logic_1;
        else 
            prediction_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
