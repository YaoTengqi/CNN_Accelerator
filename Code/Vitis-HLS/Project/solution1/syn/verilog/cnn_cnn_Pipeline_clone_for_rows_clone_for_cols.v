// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_cnn_Pipeline_clone_for_rows_clone_for_cols (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pad_img_address0,
        pad_img_ce0,
        pad_img_q0,
        pad_img1_address0,
        pad_img1_ce0,
        pad_img1_we0,
        pad_img1_d0,
        pad_img2_address0,
        pad_img2_ce0,
        pad_img2_we0,
        pad_img2_d0,
        pad_img3_address0,
        pad_img3_ce0,
        pad_img3_we0,
        pad_img3_d0,
        pad_img4_address0,
        pad_img4_ce0,
        pad_img4_we0,
        pad_img4_d0,
        pad_img5_address0,
        pad_img5_ce0,
        pad_img5_we0,
        pad_img5_d0,
        pad_img6_address0,
        pad_img6_ce0,
        pad_img6_we0,
        pad_img6_d0,
        pad_img7_address0,
        pad_img7_ce0,
        pad_img7_we0,
        pad_img7_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] pad_img_address0;
output   pad_img_ce0;
input  [31:0] pad_img_q0;
output  [9:0] pad_img1_address0;
output   pad_img1_ce0;
output   pad_img1_we0;
output  [31:0] pad_img1_d0;
output  [9:0] pad_img2_address0;
output   pad_img2_ce0;
output   pad_img2_we0;
output  [31:0] pad_img2_d0;
output  [9:0] pad_img3_address0;
output   pad_img3_ce0;
output   pad_img3_we0;
output  [31:0] pad_img3_d0;
output  [9:0] pad_img4_address0;
output   pad_img4_ce0;
output   pad_img4_we0;
output  [31:0] pad_img4_d0;
output  [9:0] pad_img5_address0;
output   pad_img5_ce0;
output   pad_img5_we0;
output  [31:0] pad_img5_d0;
output  [9:0] pad_img6_address0;
output   pad_img6_ce0;
output   pad_img6_we0;
output  [31:0] pad_img6_d0;
output  [9:0] pad_img7_address0;
output   pad_img7_ce0;
output   pad_img7_we0;
output  [31:0] pad_img7_d0;

reg ap_idle;
reg pad_img_ce0;
reg pad_img1_ce0;
reg pad_img1_we0;
reg pad_img2_ce0;
reg pad_img2_we0;
reg pad_img3_ce0;
reg pad_img3_we0;
reg pad_img4_ce0;
reg pad_img4_we0;
reg pad_img5_ce0;
reg pad_img5_we0;
reg pad_img6_ce0;
reg pad_img6_we0;
reg pad_img7_ce0;
reg pad_img7_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln146_fu_197_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln150_fu_273_p2;
reg   [9:0] add_ln150_reg_329;
wire   [63:0] zext_ln150_2_fu_300_p1;
reg   [63:0] zext_ln150_2_reg_334;
wire    ap_block_pp0_stage0;
reg   [4:0] j_fu_56;
wire   [4:0] add_ln148_fu_279_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_60;
wire   [4:0] select_ln146_1_fu_235_p3;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten6_fu_64;
wire   [9:0] add_ln146_1_fu_203_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [0:0] icmp_ln148_fu_221_p2;
wire   [4:0] add_ln146_fu_215_p2;
wire   [5:0] tmp_54_fu_251_p3;
wire   [9:0] tmp_53_fu_243_p3;
wire   [9:0] zext_ln150_fu_259_p1;
wire   [4:0] select_ln146_fu_227_p3;
wire   [9:0] sub_ln150_fu_263_p2;
wire   [9:0] zext_ln150_1_fu_269_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln146_fu_197_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= select_ln146_1_fu_235_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln146_fu_197_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_64 <= add_ln146_1_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_64 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln146_fu_197_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_56 <= add_ln148_fu_279_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln146_fu_197_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln150_reg_329 <= add_ln150_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln150_2_reg_334[9 : 0] <= zext_ln150_2_fu_300_p1[9 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln146_fu_197_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img1_ce0 = 1'b1;
    end else begin
        pad_img1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img1_we0 = 1'b1;
    end else begin
        pad_img1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img2_ce0 = 1'b1;
    end else begin
        pad_img2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img2_we0 = 1'b1;
    end else begin
        pad_img2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img3_ce0 = 1'b1;
    end else begin
        pad_img3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img3_we0 = 1'b1;
    end else begin
        pad_img3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img4_ce0 = 1'b1;
    end else begin
        pad_img4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img4_we0 = 1'b1;
    end else begin
        pad_img4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img5_ce0 = 1'b1;
    end else begin
        pad_img5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img5_we0 = 1'b1;
    end else begin
        pad_img5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img6_ce0 = 1'b1;
    end else begin
        pad_img6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img6_we0 = 1'b1;
    end else begin
        pad_img6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img7_ce0 = 1'b1;
    end else begin
        pad_img7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pad_img7_we0 = 1'b1;
    end else begin
        pad_img7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pad_img_ce0 = 1'b1;
    end else begin
        pad_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln146_1_fu_203_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln146_fu_215_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign add_ln148_fu_279_p2 = (select_ln146_fu_227_p3 + 5'd1);

assign add_ln150_fu_273_p2 = (sub_ln150_fu_263_p2 + zext_ln150_1_fu_269_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln146_fu_197_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_221_p2 = ((ap_sig_allocacmp_j_load == 5'd30) ? 1'b1 : 1'b0);

assign pad_img1_address0 = zext_ln150_2_reg_334;

assign pad_img1_d0 = pad_img_q0;

assign pad_img2_address0 = zext_ln150_2_reg_334;

assign pad_img2_d0 = pad_img_q0;

assign pad_img3_address0 = zext_ln150_2_reg_334;

assign pad_img3_d0 = pad_img_q0;

assign pad_img4_address0 = zext_ln150_2_reg_334;

assign pad_img4_d0 = pad_img_q0;

assign pad_img5_address0 = zext_ln150_2_reg_334;

assign pad_img5_d0 = pad_img_q0;

assign pad_img6_address0 = zext_ln150_2_reg_334;

assign pad_img6_d0 = pad_img_q0;

assign pad_img7_address0 = zext_ln150_2_reg_334;

assign pad_img7_d0 = pad_img_q0;

assign pad_img_address0 = zext_ln150_2_fu_300_p1;

assign select_ln146_1_fu_235_p3 = ((icmp_ln148_fu_221_p2[0:0] == 1'b1) ? add_ln146_fu_215_p2 : ap_sig_allocacmp_i_load);

assign select_ln146_fu_227_p3 = ((icmp_ln148_fu_221_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sub_ln150_fu_263_p2 = (tmp_53_fu_243_p3 - zext_ln150_fu_259_p1);

assign tmp_53_fu_243_p3 = {{select_ln146_1_fu_235_p3}, {5'd0}};

assign tmp_54_fu_251_p3 = {{select_ln146_1_fu_235_p3}, {1'd0}};

assign zext_ln150_1_fu_269_p1 = select_ln146_fu_227_p3;

assign zext_ln150_2_fu_300_p1 = add_ln150_reg_329;

assign zext_ln150_fu_259_p1 = tmp_54_fu_251_p3;

always @ (posedge ap_clk) begin
    zext_ln150_2_reg_334[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_cnn_Pipeline_clone_for_rows_clone_for_cols
