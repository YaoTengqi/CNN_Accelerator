// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_to_softmax_streams_0_dout,
        dense_to_softmax_streams_0_empty_n,
        dense_to_softmax_streams_0_read,
        dense_to_softmax_streams_1_dout,
        dense_to_softmax_streams_1_empty_n,
        dense_to_softmax_streams_1_read,
        dense_to_softmax_streams_2_dout,
        dense_to_softmax_streams_2_empty_n,
        dense_to_softmax_streams_2_read,
        dense_to_softmax_streams_3_dout,
        dense_to_softmax_streams_3_empty_n,
        dense_to_softmax_streams_3_read,
        dense_to_softmax_streams_4_dout,
        dense_to_softmax_streams_4_empty_n,
        dense_to_softmax_streams_4_read,
        dense_to_softmax_streams_5_dout,
        dense_to_softmax_streams_5_empty_n,
        dense_to_softmax_streams_5_read,
        dense_to_softmax_streams_6_dout,
        dense_to_softmax_streams_6_empty_n,
        dense_to_softmax_streams_6_read,
        dense_to_softmax_streams_7_dout,
        dense_to_softmax_streams_7_empty_n,
        dense_to_softmax_streams_7_read,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        exp_sum_out,
        exp_sum_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 7'd1;
parameter    ap_ST_fsm_pp0_stage1 = 7'd2;
parameter    ap_ST_fsm_pp0_stage2 = 7'd4;
parameter    ap_ST_fsm_pp0_stage3 = 7'd8;
parameter    ap_ST_fsm_pp0_stage4 = 7'd16;
parameter    ap_ST_fsm_pp0_stage5 = 7'd32;
parameter    ap_ST_fsm_pp0_stage6 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] dense_to_softmax_streams_0_dout;
input   dense_to_softmax_streams_0_empty_n;
output   dense_to_softmax_streams_0_read;
input  [31:0] dense_to_softmax_streams_1_dout;
input   dense_to_softmax_streams_1_empty_n;
output   dense_to_softmax_streams_1_read;
input  [31:0] dense_to_softmax_streams_2_dout;
input   dense_to_softmax_streams_2_empty_n;
output   dense_to_softmax_streams_2_read;
input  [31:0] dense_to_softmax_streams_3_dout;
input   dense_to_softmax_streams_3_empty_n;
output   dense_to_softmax_streams_3_read;
input  [31:0] dense_to_softmax_streams_4_dout;
input   dense_to_softmax_streams_4_empty_n;
output   dense_to_softmax_streams_4_read;
input  [31:0] dense_to_softmax_streams_5_dout;
input   dense_to_softmax_streams_5_empty_n;
output   dense_to_softmax_streams_5_read;
input  [31:0] dense_to_softmax_streams_6_dout;
input   dense_to_softmax_streams_6_empty_n;
output   dense_to_softmax_streams_6_read;
input  [31:0] dense_to_softmax_streams_7_dout;
input   dense_to_softmax_streams_7_empty_n;
output   dense_to_softmax_streams_7_read;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [31:0] exp_sum_out;
output   exp_sum_out_ap_vld;

reg ap_idle;
reg dense_to_softmax_streams_0_read;
reg dense_to_softmax_streams_1_read;
reg dense_to_softmax_streams_2_read;
reg dense_to_softmax_streams_3_read;
reg dense_to_softmax_streams_4_read;
reg dense_to_softmax_streams_5_read;
reg dense_to_softmax_streams_6_read;
reg dense_to_softmax_streams_7_read;
reg prediction_ce0;
reg prediction_we0;
reg exp_sum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state14_pp0_stage6_iter1;
wire    ap_block_state21_pp0_stage6_iter2;
wire    ap_block_state28_pp0_stage6_iter3;
wire    ap_block_state35_pp0_stage6_iter4;
wire    ap_block_state42_pp0_stage6_iter5;
wire    ap_block_state49_pp0_stage6_iter6;
wire    ap_block_state56_pp0_stage6_iter7;
wire    ap_block_state63_pp0_stage6_iter8;
wire    ap_block_state70_pp0_stage6_iter9;
wire    ap_block_state77_pp0_stage6_iter10;
wire    ap_block_pp0_stage6_subdone;
reg   [0:0] icmp_ln17_reg_264;
reg    ap_condition_exit_pp0_iter0_stage6;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] dense_biases_address0;
reg    dense_biases_ce0;
wire   [31:0] dense_biases_q0;
reg    dense_to_softmax_streams_0_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    dense_to_softmax_streams_1_blk_n;
reg    dense_to_softmax_streams_2_blk_n;
reg    dense_to_softmax_streams_3_blk_n;
reg    dense_to_softmax_streams_4_blk_n;
reg    dense_to_softmax_streams_5_blk_n;
reg    dense_to_softmax_streams_6_blk_n;
reg    dense_to_softmax_streams_7_blk_n;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
wire    ap_block_state22_pp0_stage0_iter3;
wire    ap_block_state29_pp0_stage0_iter4;
wire    ap_block_state36_pp0_stage0_iter5;
wire    ap_block_state43_pp0_stage0_iter6;
wire    ap_block_state50_pp0_stage0_iter7;
wire    ap_block_state57_pp0_stage0_iter8;
wire    ap_block_state64_pp0_stage0_iter9;
wire    ap_block_state71_pp0_stage0_iter10;
wire    ap_block_state78_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln17_fu_179_p2;
reg   [0:0] icmp_ln17_reg_264_pp0_iter1_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter2_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter3_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter4_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter5_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter6_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter7_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter8_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter9_reg;
reg   [0:0] icmp_ln17_reg_264_pp0_iter10_reg;
wire   [63:0] d_cast_fu_191_p1;
reg   [63:0] d_cast_reg_268;
reg   [63:0] d_cast_reg_268_pp0_iter1_reg;
reg   [63:0] d_cast_reg_268_pp0_iter2_reg;
reg   [63:0] d_cast_reg_268_pp0_iter3_reg;
reg   [63:0] d_cast_reg_268_pp0_iter4_reg;
reg   [63:0] d_cast_reg_268_pp0_iter5_reg;
reg   [63:0] d_cast_reg_268_pp0_iter6_reg;
reg   [63:0] d_cast_reg_268_pp0_iter7_reg;
reg   [63:0] d_cast_reg_268_pp0_iter8_reg;
reg   [63:0] d_cast_reg_268_pp0_iter9_reg;
reg   [63:0] d_cast_reg_268_pp0_iter10_reg;
reg   [31:0] sum_reg_278;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_state16_pp0_stage1_iter2;
wire    ap_block_state23_pp0_stage1_iter3;
wire    ap_block_state30_pp0_stage1_iter4;
wire    ap_block_state37_pp0_stage1_iter5;
wire    ap_block_state44_pp0_stage1_iter6;
wire    ap_block_state51_pp0_stage1_iter7;
wire    ap_block_state58_pp0_stage1_iter8;
wire    ap_block_state65_pp0_stage1_iter9;
wire    ap_block_state72_pp0_stage1_iter10;
wire    ap_block_state79_pp0_stage1_iter11;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] dense_to_softmax_streams_0_read_reg_283;
reg   [31:0] dense_to_softmax_streams_1_read_reg_288;
reg   [31:0] dense_to_softmax_streams_1_read_reg_288_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_2_read_reg_293;
reg   [31:0] dense_to_softmax_streams_2_read_reg_293_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_2_read_reg_293_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_3_read_reg_298;
reg   [31:0] dense_to_softmax_streams_3_read_reg_298_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_3_read_reg_298_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_3_read_reg_298_pp0_iter3_reg;
reg   [31:0] dense_to_softmax_streams_4_read_reg_303;
reg   [31:0] dense_to_softmax_streams_4_read_reg_303_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_4_read_reg_303_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_4_read_reg_303_pp0_iter3_reg;
reg   [31:0] dense_to_softmax_streams_4_read_reg_303_pp0_iter4_reg;
reg   [31:0] dense_to_softmax_streams_5_read_reg_308;
reg   [31:0] dense_to_softmax_streams_5_read_reg_308_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_5_read_reg_308_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_5_read_reg_308_pp0_iter3_reg;
reg   [31:0] dense_to_softmax_streams_5_read_reg_308_pp0_iter4_reg;
reg   [31:0] dense_to_softmax_streams_5_read_reg_308_pp0_iter5_reg;
reg   [31:0] dense_to_softmax_streams_6_read_reg_313;
reg   [31:0] dense_to_softmax_streams_6_read_reg_313_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_6_read_reg_313_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_6_read_reg_313_pp0_iter3_reg;
reg   [31:0] dense_to_softmax_streams_6_read_reg_313_pp0_iter4_reg;
reg   [31:0] dense_to_softmax_streams_6_read_reg_313_pp0_iter5_reg;
reg   [31:0] dense_to_softmax_streams_6_read_reg_313_pp0_iter6_reg;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318_pp0_iter1_reg;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318_pp0_iter2_reg;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318_pp0_iter3_reg;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318_pp0_iter4_reg;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318_pp0_iter5_reg;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318_pp0_iter6_reg;
reg   [31:0] dense_to_softmax_streams_7_read_reg_318_pp0_iter7_reg;
wire   [31:0] bitcast_ln144_fu_201_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_state17_pp0_stage2_iter2;
wire    ap_block_state24_pp0_stage2_iter3;
wire    ap_block_state31_pp0_stage2_iter4;
wire    ap_block_state38_pp0_stage2_iter5;
wire    ap_block_state45_pp0_stage2_iter6;
wire    ap_block_state52_pp0_stage2_iter7;
wire    ap_block_state59_pp0_stage2_iter8;
wire    ap_block_state66_pp0_stage2_iter9;
wire    ap_block_state73_pp0_stage2_iter10;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] sum_2_reg_328;
wire   [31:0] bitcast_ln144_1_fu_205_p1;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] sum_2_1_reg_338;
wire   [31:0] bitcast_ln144_2_fu_209_p1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_state18_pp0_stage3_iter2;
wire    ap_block_state25_pp0_stage3_iter3;
wire    ap_block_state32_pp0_stage3_iter4;
wire    ap_block_state39_pp0_stage3_iter5;
wire    ap_block_state46_pp0_stage3_iter6;
wire    ap_block_state53_pp0_stage3_iter7;
wire    ap_block_state60_pp0_stage3_iter8;
wire    ap_block_state67_pp0_stage3_iter9;
wire    ap_block_state74_pp0_stage3_iter10;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] sum_2_2_reg_348;
wire   [31:0] bitcast_ln144_3_fu_213_p1;
reg   [31:0] sum_2_3_reg_358;
wire   [31:0] bitcast_ln144_4_fu_217_p1;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_state19_pp0_stage4_iter2;
wire    ap_block_state26_pp0_stage4_iter3;
wire    ap_block_state33_pp0_stage4_iter4;
wire    ap_block_state40_pp0_stage4_iter5;
wire    ap_block_state47_pp0_stage4_iter6;
wire    ap_block_state54_pp0_stage4_iter7;
wire    ap_block_state61_pp0_stage4_iter8;
wire    ap_block_state68_pp0_stage4_iter9;
wire    ap_block_state75_pp0_stage4_iter10;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] sum_2_4_reg_368;
wire   [31:0] bitcast_ln144_5_fu_221_p1;
reg   [31:0] sum_2_5_reg_378;
wire   [31:0] bitcast_ln144_6_fu_225_p1;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state13_pp0_stage5_iter1;
wire    ap_block_state20_pp0_stage5_iter2;
wire    ap_block_state27_pp0_stage5_iter3;
wire    ap_block_state34_pp0_stage5_iter4;
wire    ap_block_state41_pp0_stage5_iter5;
wire    ap_block_state48_pp0_stage5_iter6;
wire    ap_block_state55_pp0_stage5_iter7;
wire    ap_block_state62_pp0_stage5_iter8;
wire    ap_block_state69_pp0_stage5_iter9;
wire    ap_block_state76_pp0_stage5_iter10;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] sum_2_6_reg_388;
wire   [31:0] bitcast_ln144_7_fu_229_p1;
reg   [31:0] sum_2_7_reg_398;
wire   [31:0] grp_fu_161_p2;
reg   [31:0] tmp_reg_403;
reg   [31:0] exp_sum_1_reg_414;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0;
reg   [31:0] exp_sum_fu_64;
reg   [31:0] ap_sig_allocacmp_exp_sum_load;
wire    ap_loop_init;
reg   [3:0] d_fu_68;
wire   [3:0] add_ln17_fu_185_p2;
reg   [3:0] ap_sig_allocacmp_d_1;
reg    ap_block_pp0_stage1_01001;
reg   [31:0] grp_fu_153_p0;
reg   [31:0] grp_fu_153_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
reg   [31:0] grp_fu_157_p0;
reg   [31:0] grp_fu_157_p1;
reg    grp_fu_153_ce;
wire    ap_block_pp0_stage6_11001;
reg    grp_fu_157_ce;
reg    grp_fu_161_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter10_stage1;
reg    ap_idle_pp0_0to9;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to11;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size_dense_biases_ROM_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_biases_address0),
    .ce0(dense_biases_ce0),
    .q0(dense_biases_q0)
);

cnn_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U555(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_153_p0),
    .din1(grp_fu_153_p1),
    .ce(grp_fu_153_ce),
    .dout(grp_fu_153_p2)
);

cnn_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U556(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p0),
    .din1(grp_fu_157_p1),
    .ce(grp_fu_157_ce),
    .dout(grp_fu_157_p2)
);

cnn_fexp_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_10_full_dsp_1_U557(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(sum_2_7_reg_398),
    .ce(grp_fu_161_ce),
    .dout(grp_fu_161_p2)
);

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage6),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage6)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln17_fu_179_p2 == 1'd0))) begin
            d_fu_68 <= add_ln17_fu_185_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            d_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_sum_fu_64 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_sum_fu_64 <= exp_sum_1_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_179_p2 == 1'd0))) begin
        d_cast_reg_268[3 : 0] <= d_cast_fu_191_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_cast_reg_268_pp0_iter10_reg[3 : 0] <= d_cast_reg_268_pp0_iter9_reg[3 : 0];
        d_cast_reg_268_pp0_iter1_reg[3 : 0] <= d_cast_reg_268[3 : 0];
        d_cast_reg_268_pp0_iter2_reg[3 : 0] <= d_cast_reg_268_pp0_iter1_reg[3 : 0];
        d_cast_reg_268_pp0_iter3_reg[3 : 0] <= d_cast_reg_268_pp0_iter2_reg[3 : 0];
        d_cast_reg_268_pp0_iter4_reg[3 : 0] <= d_cast_reg_268_pp0_iter3_reg[3 : 0];
        d_cast_reg_268_pp0_iter5_reg[3 : 0] <= d_cast_reg_268_pp0_iter4_reg[3 : 0];
        d_cast_reg_268_pp0_iter6_reg[3 : 0] <= d_cast_reg_268_pp0_iter5_reg[3 : 0];
        d_cast_reg_268_pp0_iter7_reg[3 : 0] <= d_cast_reg_268_pp0_iter6_reg[3 : 0];
        d_cast_reg_268_pp0_iter8_reg[3 : 0] <= d_cast_reg_268_pp0_iter7_reg[3 : 0];
        d_cast_reg_268_pp0_iter9_reg[3 : 0] <= d_cast_reg_268_pp0_iter8_reg[3 : 0];
        icmp_ln17_reg_264 <= icmp_ln17_fu_179_p2;
        icmp_ln17_reg_264_pp0_iter10_reg <= icmp_ln17_reg_264_pp0_iter9_reg;
        icmp_ln17_reg_264_pp0_iter1_reg <= icmp_ln17_reg_264;
        icmp_ln17_reg_264_pp0_iter2_reg <= icmp_ln17_reg_264_pp0_iter1_reg;
        icmp_ln17_reg_264_pp0_iter3_reg <= icmp_ln17_reg_264_pp0_iter2_reg;
        icmp_ln17_reg_264_pp0_iter4_reg <= icmp_ln17_reg_264_pp0_iter3_reg;
        icmp_ln17_reg_264_pp0_iter5_reg <= icmp_ln17_reg_264_pp0_iter4_reg;
        icmp_ln17_reg_264_pp0_iter6_reg <= icmp_ln17_reg_264_pp0_iter5_reg;
        icmp_ln17_reg_264_pp0_iter7_reg <= icmp_ln17_reg_264_pp0_iter6_reg;
        icmp_ln17_reg_264_pp0_iter8_reg <= icmp_ln17_reg_264_pp0_iter7_reg;
        icmp_ln17_reg_264_pp0_iter9_reg <= icmp_ln17_reg_264_pp0_iter8_reg;
        tmp_reg_403 <= grp_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_0_read_reg_283 <= dense_to_softmax_streams_0_dout;
        dense_to_softmax_streams_1_read_reg_288 <= dense_to_softmax_streams_1_dout;
        dense_to_softmax_streams_2_read_reg_293 <= dense_to_softmax_streams_2_dout;
        dense_to_softmax_streams_3_read_reg_298 <= dense_to_softmax_streams_3_dout;
        dense_to_softmax_streams_4_read_reg_303 <= dense_to_softmax_streams_4_dout;
        dense_to_softmax_streams_5_read_reg_308 <= dense_to_softmax_streams_5_dout;
        dense_to_softmax_streams_6_read_reg_313 <= dense_to_softmax_streams_6_dout;
        dense_to_softmax_streams_7_read_reg_318 <= dense_to_softmax_streams_7_dout;
        sum_reg_278 <= dense_biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_1_read_reg_288_pp0_iter1_reg <= dense_to_softmax_streams_1_read_reg_288;
        dense_to_softmax_streams_2_read_reg_293_pp0_iter1_reg <= dense_to_softmax_streams_2_read_reg_293;
        dense_to_softmax_streams_2_read_reg_293_pp0_iter2_reg <= dense_to_softmax_streams_2_read_reg_293_pp0_iter1_reg;
        dense_to_softmax_streams_3_read_reg_298_pp0_iter1_reg <= dense_to_softmax_streams_3_read_reg_298;
        dense_to_softmax_streams_3_read_reg_298_pp0_iter2_reg <= dense_to_softmax_streams_3_read_reg_298_pp0_iter1_reg;
        dense_to_softmax_streams_3_read_reg_298_pp0_iter3_reg <= dense_to_softmax_streams_3_read_reg_298_pp0_iter2_reg;
        dense_to_softmax_streams_4_read_reg_303_pp0_iter1_reg <= dense_to_softmax_streams_4_read_reg_303;
        dense_to_softmax_streams_4_read_reg_303_pp0_iter2_reg <= dense_to_softmax_streams_4_read_reg_303_pp0_iter1_reg;
        dense_to_softmax_streams_4_read_reg_303_pp0_iter3_reg <= dense_to_softmax_streams_4_read_reg_303_pp0_iter2_reg;
        dense_to_softmax_streams_4_read_reg_303_pp0_iter4_reg <= dense_to_softmax_streams_4_read_reg_303_pp0_iter3_reg;
        dense_to_softmax_streams_5_read_reg_308_pp0_iter1_reg <= dense_to_softmax_streams_5_read_reg_308;
        dense_to_softmax_streams_5_read_reg_308_pp0_iter2_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter1_reg;
        dense_to_softmax_streams_5_read_reg_308_pp0_iter3_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter2_reg;
        dense_to_softmax_streams_5_read_reg_308_pp0_iter4_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter3_reg;
        dense_to_softmax_streams_5_read_reg_308_pp0_iter5_reg <= dense_to_softmax_streams_5_read_reg_308_pp0_iter4_reg;
        dense_to_softmax_streams_6_read_reg_313_pp0_iter1_reg <= dense_to_softmax_streams_6_read_reg_313;
        dense_to_softmax_streams_6_read_reg_313_pp0_iter2_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter1_reg;
        dense_to_softmax_streams_6_read_reg_313_pp0_iter3_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter2_reg;
        dense_to_softmax_streams_6_read_reg_313_pp0_iter4_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter3_reg;
        dense_to_softmax_streams_6_read_reg_313_pp0_iter5_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter4_reg;
        dense_to_softmax_streams_6_read_reg_313_pp0_iter6_reg <= dense_to_softmax_streams_6_read_reg_313_pp0_iter5_reg;
        dense_to_softmax_streams_7_read_reg_318_pp0_iter1_reg <= dense_to_softmax_streams_7_read_reg_318;
        dense_to_softmax_streams_7_read_reg_318_pp0_iter2_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter1_reg;
        dense_to_softmax_streams_7_read_reg_318_pp0_iter3_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter2_reg;
        dense_to_softmax_streams_7_read_reg_318_pp0_iter4_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter3_reg;
        dense_to_softmax_streams_7_read_reg_318_pp0_iter5_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter4_reg;
        dense_to_softmax_streams_7_read_reg_318_pp0_iter6_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter5_reg;
        dense_to_softmax_streams_7_read_reg_318_pp0_iter7_reg <= dense_to_softmax_streams_7_read_reg_318_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_sum_1_reg_414 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_2_1_reg_338 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sum_2_2_reg_348 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sum_2_3_reg_358 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sum_2_4_reg_368 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sum_2_5_reg_378 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        sum_2_6_reg_388 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        sum_2_7_reg_398 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_2_reg_328 <= grp_fu_153_p2;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd1) & (1'b0 == ap_block_pp0_stage6_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln17_reg_264_pp0_iter10_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter10_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter10_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to9 = 1'b1;
    end else begin
        ap_idle_pp0_0to9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to11 = 1'b1;
    end else begin
        ap_idle_pp0_1to11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_d_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_d_1 = d_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_exp_sum_load = exp_sum_1_reg_414;
    end else begin
        ap_sig_allocacmp_exp_sum_load = exp_sum_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_biases_ce0 = 1'b1;
    end else begin
        dense_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_0_blk_n = dense_to_softmax_streams_0_empty_n;
    end else begin
        dense_to_softmax_streams_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_0_read = 1'b1;
    end else begin
        dense_to_softmax_streams_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_1_blk_n = dense_to_softmax_streams_1_empty_n;
    end else begin
        dense_to_softmax_streams_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_1_read = 1'b1;
    end else begin
        dense_to_softmax_streams_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_2_blk_n = dense_to_softmax_streams_2_empty_n;
    end else begin
        dense_to_softmax_streams_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_2_read = 1'b1;
    end else begin
        dense_to_softmax_streams_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_3_blk_n = dense_to_softmax_streams_3_empty_n;
    end else begin
        dense_to_softmax_streams_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_3_read = 1'b1;
    end else begin
        dense_to_softmax_streams_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_4_blk_n = dense_to_softmax_streams_4_empty_n;
    end else begin
        dense_to_softmax_streams_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_4_read = 1'b1;
    end else begin
        dense_to_softmax_streams_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_5_blk_n = dense_to_softmax_streams_5_empty_n;
    end else begin
        dense_to_softmax_streams_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_5_read = 1'b1;
    end else begin
        dense_to_softmax_streams_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_6_blk_n = dense_to_softmax_streams_6_empty_n;
    end else begin
        dense_to_softmax_streams_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_6_read = 1'b1;
    end else begin
        dense_to_softmax_streams_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_7_blk_n = dense_to_softmax_streams_7_empty_n;
    end else begin
        dense_to_softmax_streams_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_to_softmax_streams_7_read = 1'b1;
    end else begin
        dense_to_softmax_streams_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln17_reg_264_pp0_iter10_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_sum_out_ap_vld = 1'b1;
    end else begin
        exp_sum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_153_ce = 1'b1;
    end else begin
        grp_fu_153_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_153_p0 = ap_sig_allocacmp_exp_sum_load;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_153_p0 = sum_2_5_reg_378;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_153_p0 = sum_2_3_reg_358;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_153_p0 = sum_2_1_reg_338;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_153_p0 = sum_reg_278;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_153_p1 = tmp_reg_403;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_153_p1 = bitcast_ln144_6_fu_225_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_153_p1 = bitcast_ln144_4_fu_217_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_153_p1 = bitcast_ln144_2_fu_209_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_153_p1 = bitcast_ln144_fu_201_p1;
    end else begin
        grp_fu_153_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_157_ce = 1'b1;
    end else begin
        grp_fu_157_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_157_p0 = sum_2_6_reg_388;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_157_p0 = sum_2_4_reg_368;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_157_p0 = sum_2_2_reg_348;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_157_p0 = sum_2_reg_328;
    end else begin
        grp_fu_157_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_157_p1 = bitcast_ln144_7_fu_229_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_157_p1 = bitcast_ln144_5_fu_221_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_157_p1 = bitcast_ln144_3_fu_213_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_157_p1 = bitcast_ln144_1_fu_205_p1;
    end else begin
        grp_fu_157_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_161_ce = 1'b1;
    end else begin
        grp_fu_161_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to11 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to9 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter10_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_185_p2 = (ap_sig_allocacmp_d_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((dense_to_softmax_streams_0_empty_n == 1'b0) & (icmp_ln17_reg_264 == 1'd0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_7_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_6_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_5_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_4_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_3_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_2_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((dense_to_softmax_streams_0_empty_n == 1'b0) & (icmp_ln17_reg_264 == 1'd0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_7_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_6_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_5_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_4_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_3_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_2_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((dense_to_softmax_streams_0_empty_n == 1'b0) & (icmp_ln17_reg_264 == 1'd0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_7_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_6_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_5_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_4_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_3_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_2_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_1_empty_n == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((dense_to_softmax_streams_0_empty_n == 1'b0) & (icmp_ln17_reg_264 == 1'd0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_7_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_6_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_5_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_4_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_3_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_2_empty_n == 1'b0)) | ((icmp_ln17_reg_264 == 1'd0) & (dense_to_softmax_streams_1_empty_n == 1'b0)));
end

assign ap_block_state30_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage6_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage5_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage6_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage5_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage6_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage4_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage5_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage6_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage3_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage4_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage5_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage6_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage3_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage4_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage5_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage6_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage6;

assign bitcast_ln144_1_fu_205_p1 = dense_to_softmax_streams_1_read_reg_288_pp0_iter1_reg;

assign bitcast_ln144_2_fu_209_p1 = dense_to_softmax_streams_2_read_reg_293_pp0_iter2_reg;

assign bitcast_ln144_3_fu_213_p1 = dense_to_softmax_streams_3_read_reg_298_pp0_iter3_reg;

assign bitcast_ln144_4_fu_217_p1 = dense_to_softmax_streams_4_read_reg_303_pp0_iter4_reg;

assign bitcast_ln144_5_fu_221_p1 = dense_to_softmax_streams_5_read_reg_308_pp0_iter5_reg;

assign bitcast_ln144_6_fu_225_p1 = dense_to_softmax_streams_6_read_reg_313_pp0_iter6_reg;

assign bitcast_ln144_7_fu_229_p1 = dense_to_softmax_streams_7_read_reg_318_pp0_iter7_reg;

assign bitcast_ln144_fu_201_p1 = dense_to_softmax_streams_0_read_reg_283;

assign d_cast_fu_191_p1 = ap_sig_allocacmp_d_1;

assign dense_biases_address0 = d_cast_fu_191_p1;

assign exp_sum_out = exp_sum_fu_64;

assign icmp_ln17_fu_179_p2 = ((ap_sig_allocacmp_d_1 == 4'd10) ? 1'b1 : 1'b0);

assign prediction_address0 = d_cast_reg_268_pp0_iter10_reg;

assign prediction_d0 = tmp_reg_403;

always @ (posedge ap_clk) begin
    d_cast_reg_268[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    d_cast_reg_268_pp0_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_dense_layer_soft_max_Pipeline_dense_soft_max_for_dense_size
